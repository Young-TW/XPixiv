name: Release

on:
  push:
    tags:
      - "v.*"

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  aur-release:
    name: Arch Linux Aur Package 
    runs-on: ubuntu-latest
    needs: 'release'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get version
        id: get_version
        uses: SebRollen/toml-action@v1.0.1
        with:
          file: Cargo.toml
          field: package.version
      - name: Create AUR PKGBUILD
        run: |
          mkdir aur
          echo 'pkgname=x-pixiv-bin
          pkgver=${{ steps.get_version.outputs.value }}
          pkgrel=1
          pkgdesc="Pixiv downloader"
          url="https://github.com/xiaoxigua-1/XPixiv"
          license=("MIT")
          arch=("x86_64")
          provides=("x-pixiv")
          conflicts=("x-pixiv")
          depends=("openssl")
          source_x86_64=("https://github.com/xiaoxigua-1/XPixiv/releases/download/v.${{ steps.get_version.outputs.value }}/x-pixiv-${{ steps.get_version.outputs.value }}-x86_64-unknown-linux-gnu.tar.gz")
          source_aarch64=("https://github.com/xiaoxigua-1/XPixiv/releases/download/v.${{ steps.get_version.outputs.value }}/x-pixiv-${{ steps.get_version.outputs.value }}-aarch64-unknown-linux-gnu.tar.gz")

          package() {
              install -Dm755 x-pixiv -t "$pkgdir/usr/bin"
              install -Dm644 LICENSE "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
          }' > aur/PKGBUILD
     
      - name: Validate AUR package
        uses: hapakaien/archlinux-package-action@v2
        with:
          flags: ''
          namcap: false
          updpkgsums: true
          path: aur

      - name: cat
        run: |
          cat aur/PKGBUILD
      - name: Publish AUR package
        uses: KSXGitHub/github-actions-deploy-aur@v2.7.0
        with:
          pkgname: x-pixiv-bin 
          pkgbuild: ./aur/PKGBUILD
          commit_username: xiaoxigua-1
          commit_email: xigua@xigua.tw 
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          commit_message: Update AUR package
          ssh_keyscan_types: rsa,dsa,ecdsa,ed25519
  release:
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            aur: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu

          - os: macos-11
            target: x86_64-apple-darwin
          - os: macos-11
            target: aarch64-apple-darwin

          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        uses: SebRollen/toml-action@v1.0.1
        with:
          file: Cargo.toml
          field: package.version

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build binary
        uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505 # v1.0.3
        with:
          command: build
          args: --release --target=${{ matrix.target }} --color=always --verbose
          use-cross: ${{ runner.os == 'Linux' }}
      - name: Install cargo-deb
        if: runner.os == 'Linux'
        uses: actions-rs/install@9da1d2adcfe5e7c16992e8242ca33a56b6d9b101 # v0.1.2
        with:
          crate: cargo-deb

      - name: Build deb
        if: runner.os == 'Linux'
        uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505 # v1.0.3
        with:
          command: deb
          args: --no-build --no-strip --output=. --target=${{ matrix.target }}
          use-cross: ${{ runner.os == 'Linux' }}

      
      - name: Package (*nix)
        if: runner.os != 'Windows'
        run: >
          tar -cv
          LICENSE README.md
          -C target/${{ matrix.target }}/release/ x-pixiv
          | gzip --best
          > 'x-pixiv-${{ steps.get_version.outputs.value }}-${{ matrix.target }}.tar.gz'
      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: >
          7z a 'x-pixiv-${{ steps.get_version.outputs.value }}-${{ matrix.target }}.zip'
          LICENSE README.md
          ./target/${{ matrix.target }}/release/x-pixiv.exe
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: |
            *.deb
            *.tar.gz
            *.zip
      - name: Create release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
        with:
          draft: true
          files: |
            *.deb
            *.tar.gz
            *.zip
          name: ${{ steps.get_version.outputs.value }}
          tag_name: ""
